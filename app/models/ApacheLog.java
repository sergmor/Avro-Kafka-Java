/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package models;  
@SuppressWarnings("all")
/** Apache Log Event */
@org.apache.avro.specific.AvroGenerated
public class ApacheLog extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApacheLog\",\"namespace\":\"models\",\"doc\":\"Apache Log Event\",\"fields\":[{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"log\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"datetime\",\"type\":\"string\"},{\"name\":\"request\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"string\"},{\"name\":\"referer\",\"type\":\"string\"},{\"name\":\"userAgent\",\"type\":\"string\"},{\"name\":\"session\",\"type\":\"string\"},{\"name\":\"responseTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public java.lang.CharSequence log;
  @Deprecated public java.lang.CharSequence user;
  @Deprecated public java.lang.CharSequence datetime;
  @Deprecated public java.lang.CharSequence request;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public java.lang.CharSequence size;
  @Deprecated public java.lang.CharSequence referer;
  @Deprecated public java.lang.CharSequence userAgent;
  @Deprecated public java.lang.CharSequence session;
  @Deprecated public java.lang.CharSequence responseTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ApacheLog() {}

  /**
   * All-args constructor.
   */
  public ApacheLog(java.lang.CharSequence host, java.lang.CharSequence log, java.lang.CharSequence user, java.lang.CharSequence datetime, java.lang.CharSequence request, java.lang.CharSequence status, java.lang.CharSequence size, java.lang.CharSequence referer, java.lang.CharSequence userAgent, java.lang.CharSequence session, java.lang.CharSequence responseTime) {
    this.host = host;
    this.log = log;
    this.user = user;
    this.datetime = datetime;
    this.request = request;
    this.status = status;
    this.size = size;
    this.referer = referer;
    this.userAgent = userAgent;
    this.session = session;
    this.responseTime = responseTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return host;
    case 1: return log;
    case 2: return user;
    case 3: return datetime;
    case 4: return request;
    case 5: return status;
    case 6: return size;
    case 7: return referer;
    case 8: return userAgent;
    case 9: return session;
    case 10: return responseTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: host = (java.lang.CharSequence)value$; break;
    case 1: log = (java.lang.CharSequence)value$; break;
    case 2: user = (java.lang.CharSequence)value$; break;
    case 3: datetime = (java.lang.CharSequence)value$; break;
    case 4: request = (java.lang.CharSequence)value$; break;
    case 5: status = (java.lang.CharSequence)value$; break;
    case 6: size = (java.lang.CharSequence)value$; break;
    case 7: referer = (java.lang.CharSequence)value$; break;
    case 8: userAgent = (java.lang.CharSequence)value$; break;
    case 9: session = (java.lang.CharSequence)value$; break;
    case 10: responseTime = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'log' field.
   */
  public java.lang.CharSequence getLog() {
    return log;
  }

  /**
   * Sets the value of the 'log' field.
   * @param value the value to set.
   */
  public void setLog(java.lang.CharSequence value) {
    this.log = value;
  }

  /**
   * Gets the value of the 'user' field.
   */
  public java.lang.CharSequence getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'datetime' field.
   */
  public java.lang.CharSequence getDatetime() {
    return datetime;
  }

  /**
   * Sets the value of the 'datetime' field.
   * @param value the value to set.
   */
  public void setDatetime(java.lang.CharSequence value) {
    this.datetime = value;
  }

  /**
   * Gets the value of the 'request' field.
   */
  public java.lang.CharSequence getRequest() {
    return request;
  }

  /**
   * Sets the value of the 'request' field.
   * @param value the value to set.
   */
  public void setRequest(java.lang.CharSequence value) {
    this.request = value;
  }

  /**
   * Gets the value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'size' field.
   */
  public java.lang.CharSequence getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.CharSequence value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'referer' field.
   */
  public java.lang.CharSequence getReferer() {
    return referer;
  }

  /**
   * Sets the value of the 'referer' field.
   * @param value the value to set.
   */
  public void setReferer(java.lang.CharSequence value) {
    this.referer = value;
  }

  /**
   * Gets the value of the 'userAgent' field.
   */
  public java.lang.CharSequence getUserAgent() {
    return userAgent;
  }

  /**
   * Sets the value of the 'userAgent' field.
   * @param value the value to set.
   */
  public void setUserAgent(java.lang.CharSequence value) {
    this.userAgent = value;
  }

  /**
   * Gets the value of the 'session' field.
   */
  public java.lang.CharSequence getSession() {
    return session;
  }

  /**
   * Sets the value of the 'session' field.
   * @param value the value to set.
   */
  public void setSession(java.lang.CharSequence value) {
    this.session = value;
  }

  /**
   * Gets the value of the 'responseTime' field.
   */
  public java.lang.CharSequence getResponseTime() {
    return responseTime;
  }

  /**
   * Sets the value of the 'responseTime' field.
   * @param value the value to set.
   */
  public void setResponseTime(java.lang.CharSequence value) {
    this.responseTime = value;
  }

  /** Creates a new ApacheLog RecordBuilder */
  public static models.ApacheLog.Builder newBuilder() {
    return new models.ApacheLog.Builder();
  }
  
  /** Creates a new ApacheLog RecordBuilder by copying an existing Builder */
  public static models.ApacheLog.Builder newBuilder(models.ApacheLog.Builder other) {
    return new models.ApacheLog.Builder(other);
  }
  
  /** Creates a new ApacheLog RecordBuilder by copying an existing ApacheLog instance */
  public static models.ApacheLog.Builder newBuilder(models.ApacheLog other) {
    return new models.ApacheLog.Builder(other);
  }
  
  /**
   * RecordBuilder for ApacheLog instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApacheLog>
    implements org.apache.avro.data.RecordBuilder<ApacheLog> {

    private java.lang.CharSequence host;
    private java.lang.CharSequence log;
    private java.lang.CharSequence user;
    private java.lang.CharSequence datetime;
    private java.lang.CharSequence request;
    private java.lang.CharSequence status;
    private java.lang.CharSequence size;
    private java.lang.CharSequence referer;
    private java.lang.CharSequence userAgent;
    private java.lang.CharSequence session;
    private java.lang.CharSequence responseTime;

    /** Creates a new Builder */
    private Builder() {
      super(models.ApacheLog.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(models.ApacheLog.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.host)) {
        this.host = data().deepCopy(fields()[0].schema(), other.host);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.log)) {
        this.log = data().deepCopy(fields()[1].schema(), other.log);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.datetime)) {
        this.datetime = data().deepCopy(fields()[3].schema(), other.datetime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.request)) {
        this.request = data().deepCopy(fields()[4].schema(), other.request);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.size)) {
        this.size = data().deepCopy(fields()[6].schema(), other.size);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.referer)) {
        this.referer = data().deepCopy(fields()[7].schema(), other.referer);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userAgent)) {
        this.userAgent = data().deepCopy(fields()[8].schema(), other.userAgent);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.session)) {
        this.session = data().deepCopy(fields()[9].schema(), other.session);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.responseTime)) {
        this.responseTime = data().deepCopy(fields()[10].schema(), other.responseTime);
        fieldSetFlags()[10] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ApacheLog instance */
    private Builder(models.ApacheLog other) {
            super(models.ApacheLog.SCHEMA$);
      if (isValidValue(fields()[0], other.host)) {
        this.host = data().deepCopy(fields()[0].schema(), other.host);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.log)) {
        this.log = data().deepCopy(fields()[1].schema(), other.log);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.datetime)) {
        this.datetime = data().deepCopy(fields()[3].schema(), other.datetime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.request)) {
        this.request = data().deepCopy(fields()[4].schema(), other.request);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.size)) {
        this.size = data().deepCopy(fields()[6].schema(), other.size);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.referer)) {
        this.referer = data().deepCopy(fields()[7].schema(), other.referer);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.userAgent)) {
        this.userAgent = data().deepCopy(fields()[8].schema(), other.userAgent);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.session)) {
        this.session = data().deepCopy(fields()[9].schema(), other.session);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.responseTime)) {
        this.responseTime = data().deepCopy(fields()[10].schema(), other.responseTime);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public models.ApacheLog.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.host = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'host' field */
    public models.ApacheLog.Builder clearHost() {
      host = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'log' field */
    public java.lang.CharSequence getLog() {
      return log;
    }
    
    /** Sets the value of the 'log' field */
    public models.ApacheLog.Builder setLog(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.log = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'log' field has been set */
    public boolean hasLog() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'log' field */
    public models.ApacheLog.Builder clearLog() {
      log = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'user' field */
    public java.lang.CharSequence getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public models.ApacheLog.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.user = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'user' field */
    public models.ApacheLog.Builder clearUser() {
      user = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'datetime' field */
    public java.lang.CharSequence getDatetime() {
      return datetime;
    }
    
    /** Sets the value of the 'datetime' field */
    public models.ApacheLog.Builder setDatetime(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.datetime = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'datetime' field has been set */
    public boolean hasDatetime() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'datetime' field */
    public models.ApacheLog.Builder clearDatetime() {
      datetime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'request' field */
    public java.lang.CharSequence getRequest() {
      return request;
    }
    
    /** Sets the value of the 'request' field */
    public models.ApacheLog.Builder setRequest(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.request = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'request' field has been set */
    public boolean hasRequest() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'request' field */
    public models.ApacheLog.Builder clearRequest() {
      request = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'status' field */
    public java.lang.CharSequence getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public models.ApacheLog.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'status' field */
    public models.ApacheLog.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'size' field */
    public java.lang.CharSequence getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public models.ApacheLog.Builder setSize(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.size = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'size' field */
    public models.ApacheLog.Builder clearSize() {
      size = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'referer' field */
    public java.lang.CharSequence getReferer() {
      return referer;
    }
    
    /** Sets the value of the 'referer' field */
    public models.ApacheLog.Builder setReferer(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.referer = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'referer' field has been set */
    public boolean hasReferer() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'referer' field */
    public models.ApacheLog.Builder clearReferer() {
      referer = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'userAgent' field */
    public java.lang.CharSequence getUserAgent() {
      return userAgent;
    }
    
    /** Sets the value of the 'userAgent' field */
    public models.ApacheLog.Builder setUserAgent(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.userAgent = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'userAgent' field has been set */
    public boolean hasUserAgent() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'userAgent' field */
    public models.ApacheLog.Builder clearUserAgent() {
      userAgent = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'session' field */
    public java.lang.CharSequence getSession() {
      return session;
    }
    
    /** Sets the value of the 'session' field */
    public models.ApacheLog.Builder setSession(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.session = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'session' field has been set */
    public boolean hasSession() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'session' field */
    public models.ApacheLog.Builder clearSession() {
      session = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'responseTime' field */
    public java.lang.CharSequence getResponseTime() {
      return responseTime;
    }
    
    /** Sets the value of the 'responseTime' field */
    public models.ApacheLog.Builder setResponseTime(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.responseTime = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'responseTime' field has been set */
    public boolean hasResponseTime() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'responseTime' field */
    public models.ApacheLog.Builder clearResponseTime() {
      responseTime = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public ApacheLog build() {
      try {
        ApacheLog record = new ApacheLog();
        record.host = fieldSetFlags()[0] ? this.host : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.log = fieldSetFlags()[1] ? this.log : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.user = fieldSetFlags()[2] ? this.user : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.datetime = fieldSetFlags()[3] ? this.datetime : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.request = fieldSetFlags()[4] ? this.request : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.size = fieldSetFlags()[6] ? this.size : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.referer = fieldSetFlags()[7] ? this.referer : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.userAgent = fieldSetFlags()[8] ? this.userAgent : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.session = fieldSetFlags()[9] ? this.session : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.responseTime = fieldSetFlags()[10] ? this.responseTime : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
